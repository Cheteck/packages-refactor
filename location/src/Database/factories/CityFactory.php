<?php

namespace IJIDeals\Location\Database\factories;

use IJIDeals\Location\Models\City;
use IJIDeals\Location\Models\Country;
use IJIDeals\Location\Models\Region;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\IJIDeals\Location\Models\City>
 */
class CityFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = City::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'country_id' => Country::factory(),
            'region_id' => Region::factory(), // Or null, depending on data structure
            // 'name' and 'description' are translatable
            // 'slug' will be generated by Sluggable
            'postal_code' => $this->faker->optional()->postcode,
            'latitude' => $this->faker->latitude,
            'longitude' => $this->faker->longitude,
            'status' => true,
        ];
    }

    /**
     * Configure the model factory.
     *
     * @return $this
     */
    public function configure()
    {
        return $this->afterCreating(function (City $city) {
            if ($city->translations()->where('locale', config('app.locale', 'en'))->doesntExist()) {
                $defaultLocale = config('app.locale', 'en');
                $city->translations()->create([
                    'locale' => $defaultLocale,
                    'name' => $this->faker->city().' ('.$defaultLocale.')',
                    'description' => $this->faker->optional()->sentence,
                ]);
                $city->refresh();
            }
        });
    }
}
