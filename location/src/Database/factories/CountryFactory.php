<?php

namespace IJIDeals\Location\Database\factories;

use IJIDeals\Location\Models\Country;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\IJIDeals\Location\Models\Country>
 */
class CountryFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = Country::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        // 'name' is translatable and will be handled by CountryTranslationFactory
        // or by using a state/afterCreating hook here.
        // 'slug' will be generated by Sluggable trait from the 'name' translation.
        return [
            'iso2_code' => $this->faker->unique()->countryCode(), // Generates 2-letter ISO country code
            'iso3_code' => $this->faker->unique()->countryISOAlpha3(), // Generates 3-letter ISO country code
            'phone_code' => '+'.$this->faker->numberBetween(1, 999),
            'currency_code' => $this->faker->currencyCode(),
            'flag_emoji' => $this->faker->emoji(), // Placeholder, real flag emojis are specific
            'is_active' => true,
        ];
    }

    /**
     * Configure the model factory.
     *
     * @return $this
     */
    public function configure()
    {
        return $this->afterCreating(function (Country $country) {
            // Ensure at least one translation is created for the default locale for 'name'.
            if ($country->translations()->where('locale', config('app.locale', 'en'))->doesntExist()) {
                $defaultLocale = config('app.locale', 'en');
                $country->translations()->create([
                    'locale' => $defaultLocale,
                    'name' => $this->faker->country().' ('.$defaultLocale.')',
                ]);
                $country->refresh(); // To ensure slug gets generated if source is name
            }
        });
    }
}
